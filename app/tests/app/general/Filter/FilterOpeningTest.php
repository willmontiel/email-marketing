<?php

namespace EmailMarketing\General\Filter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-31 at 11:57:43.
 */
class FilterOpeningTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var FilterOpening
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new FilterOpening;
		
		$this->data = new \stdClass();
		$this->data->id = 45;
		$this->data->type = "mail";
	}

	/**
	 * @expectedException InvalidArgumentException
	 */
	public function testObjectIsNotAllowed()
	{
		$this->object->setObject('');
	}
	
	/**
	 * Que hayan abierto el correo 45 (Sin más filtros) condición AND
	 */
	public function testOpenOneFilterConditionAll() {
		$this->data->required = true;
		$this->data->more = false;
		$this->data->negative = false;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening != 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que hayan abierto el correo 45 (Con más filtros) condición AND
	 */
	public function testOpenMuchFilterConditionAll() {
		$this->data->required = true;
		$this->data->more = true;
		$this->data->negative = false;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening != 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que hayan abierto el correo 45 (Sin más filtros) condición OR
	 */
	public function testOpenOneFilterConditionAny() {
		$this->data->required = false;
		$this->data->more = false;
		$this->data->negative = false;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening != 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que hayan abierto el correo 45 (Con más filtros) condición OR
	 */
	public function testOpenMuchFilterConditionAny() {
		$this->data->required = false;
		$this->data->more = true;
		$this->data->negative = false;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " LEFT JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening != 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = " mc45.idContact IS NOT NULL ";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que no hayan abierto el correo 45 (Sin más filtros) condición AND
	 */
	public function testOpenOneFilterConditionAllNegative() {
		$this->data->required = true;
		$this->data->more = false;
		$this->data->negative = true;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening = 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que no hayan abierto el correo 45 (Con más filtros) condición AND
	 */
	public function testOpenMuchFilterConditionAllNegative() {
		$this->data->required = true;
		$this->data->more = true;
		$this->data->negative = true;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening = 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	
	/**
	 * Que no hayan abierto el correo 45 (Sin más filtros) condición OR
	 */
	public function testOpenOneFilterConditionAnyNegative() {
		$this->data->required = false;
		$this->data->more = false;
		$this->data->negative = true;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening = 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = "";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
	
	/**
	 * Que no hayan abierto el correo 45 (Con más filtros) condición OR
	 */
	public function testOpenMuchFilterConditionAnyNegative() {
		$this->data->required = false;
		$this->data->more = true;
		$this->data->negative = true;
		
		$this->object->setObject($this->data);
		$this->object->createSQL();
		
		$from = $this->object->getFrom();
		$expectedF = " LEFT JOIN mxc AS mc45 ON (mc45.idContact = c.idContact AND mc45.idMail = 45 AND mc45.opening = 0) ";
		
		$where = $this->object->getWhere();
		$expectedW = " mc45.idContact IS NOT NULL ";
		
		$this->assertEquals($expectedF, $from, 'FROM_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
		$this->assertEquals($expectedW, $where, 'WHERE_SQL Que hayan abierto el correo 45 (Sin más filtros) condición AND');
	}
}
